In order to use the PsExec tool, you need to have administrative privileges on the remote computer that you want to connect to. If you don't have administrative credentials for the remote computer, you won't be able to use PsExec to execute commands or launch programs on that machine.
psexec \\remotecomputer -u administrator -p password cmd.exe

winexe -U DOMAIN\username%password //remote_computer "command"

To start a VBScript file (.vbs):
- Run from the command prompt or PowerShell
  cscript.exe <filename>.vbs
  
- Double-click the file

- Schedule a task



Check what version(s) of .NET Framework are installed on a Windows system using the command line:
- reg query "HKLM\SOFTWARE\Microsoft\NET Framework Setup\NDP" /s

AMSIProviders:
AMSIProviders refers to the Antimalware Scan Interface (AMSI) providers that are registered on a Windows system. 
The AMSI provides a way for applications to send content to registered AMSI providers, which will then scan the content and return a result 
indicating whether the content is malicious or not.
AMSI providers can be implemented by antivirus software vendors or other security software providers.

AppLocker:
AppLocker is a Windows feature that allows system administrators to define rules and policies that control which applications can run on a system.
AppLocker can help enhance the security of a Windows environment by preventing users from running unauthorized or malicious applications,
which can help reduce the risk of malware infections and other security threats

Credential Guard:
Credential Guard is a security feature available on Windows 10 Enterprise and Windows Server 2016 that helps protect against credential theft attacks, such as Pass-the-Hash and Pass-the-Ticket.
It accomplishes this by using virtualization-based security to isolate and protect secrets such as Kerberos tickets and NTLM hashes.

Credential Guard is designed to work in conjunction with other security features, such as Device Guard and BitLocker,
to provide a comprehensive security solution for Windows systems.

Credential Guard addresses this issue by using virtualization-based security to create a secure environment for storing and processing credentials.
Specifically, it uses a virtualized container called the Isolated User Mode (IUM) to store sensitive information, such as Kerberos tickets and NTLM hashes.
The IUM is isolated from the rest of the operating system, making it much more difficult for attackers to access these credentials.

Windows Default share:
    ADMIN$: The ADMIN$ share is a default administrative share that is created on every Windows computer. It provides remote administrative access to the Windows folder on the system. This share is usually only accessible by administrators who have been granted the necessary permissions to manage the system remotely.

    C$: The C$ share is also a default administrative share that is created on every Windows computer. It provides access to the root of the C drive on the system. This share is typically only accessible by administrators who have been granted the necessary permissions to manage the system remotely.

    IPC$: The IPC$ share is a special hidden share that is used for interprocess communication between computers on a network. This share is usually used by Windows services and applications to communicate with other computers and devices on the network.

    Users: The Users share is a default share that is created on every Windows computer. It provides access to the Users directory on the system, which contains user profiles and data for each user account on the computer.

WSUS:

WSUS (Windows Server Update Services) is a Microsoft tool that allows system administrators to manage and distribute updates and patches for Microsoft products to computers running Windows operating systems. By using WSUS, administrators can centralize the distribution of updates and ensure that all Windows-based computers on the network are up to date with the latest security updates, bug fixes, and feature enhancements.
WSUS allows administrators to approve or decline updates before they are distributed, monitor update installations, and generate reports on update status.

MSBuild launcher:

MSBuild is a build tool that is included with the .NET Framework and is used to build .NET projects and solutions. An MSBuild project or solution file is an XML file that contains a set of instructions that describe how to build the project or solution.
These instructions typically include information about the project or solution's source code files, the build configuration, and any external dependencies.

InstallUtil  :

InstallUtil is a tool that is included with the .NET Framework and is used to install and uninstall .NET services and applications. It is typically located in the C:\Windows\Microsoft.NET\Framework[version] or C:\Windows\Microsoft.NET\Framework64[version] directory on a Windows system.
When InstallUtil is run with a .NET assembly as an argument, it loads and executes the assembly's installer class, which is responsible for installing and configuring the application or service defined in the assembly.

C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe GruntInstaller.xml


Mshta :

   - The attacker creates a .NET assembly (e.g. a C# program) that performs some malicious activity, such as stealing data or executing code on the victim's system.

   - The attacker runs DotNetToJScript on the .NET assembly, which converts it into a Base64-encoded string and embeds it within a JScript or VBScript file.

   - The resulting script file is sent to the victim's system via various means, such as email or downloading from a website.

   - When the victim opens the script file, it is executed using either cscript.exe or wscript.exe.

   - The JScript or VBScript interpreter reads the embedded Base64-encoded string, decodes it, and loads it into memory as a .NET assembly.

   - The .NET assembly is executed in memory and performs the malicious activity as designed by the attacker.
The key advantage of using DotNetToJScript in this attack flow is that the malicious .NET assembly is never written to disk on the victim's system, making it more difficult to detect and block by endpoint security products that rely on file-based detections.

Regsvr32:

Regsvr32.exe is a legitimate system binary on Windows that is used to register and unregister COM DLLs (Dynamic Link Libraries) and ActiveX controls on the system.
COM is a Microsoft technology used for interprocess communication between software components and is used extensively throughout the Windows operating system and many third-party applications.

When a DLL is registered using regsvr32.exe, the DLL's DllRegisterServer function is executed.
This function is called by the regsvr32.exe process and can contain arbitrary code. 
Attackers can take advantage of this by registering a malicious DLL that contains code to launch a Grunt payload.
When regsvr32.exe is executed, the malicious code in the DLL's DllRegisterServer function is executed, which in turn launches the Grunt payload.

WMIC :

The WMIC launcher can generate an XSL file and/or a WMIC one-liner that includes a payload, which can be executed when the XSL file or the WMIC one-liner is run with WMIC.exe. 
The payload can be a Grunt or any other type of code that the attacker wants to run on the target system. 
This technique is often used by attackers to evade detection and bypass security controls, since WMIC is a legitimate and commonly used tool in Windows environments.


The idea behind this launcher is to use the Windows Script Host (WSH) and the cscript.exe executable to execute a JScript file. This allows an attacker to bypass application whitelisting or other security measures that may prevent the use of other launchers like PowerShell or regsvr32.

cscript:

By using cscript.exe, the attacker can execute the JScript file, which in turn launches the Grunt payload using DotNetToJScript. 
This technique can be used to achieve code execution on a compromised system without raising suspicion from security monitoring solutions.


wscript:

Both cscript.exe and wscript.exe are Windows Script Host engines that interpret and execute scripts written in various scripting languages, including JScript




    SharpShell: This launcher allows an attacker to execute a shell command and receive the output of that command as a response. It can be used to interact with the file system, network, registry, and other system resources.

    SharpExec: This launcher allows an attacker to execute a binary or script on the target system. It can be used to download and execute a payload or execute a built-in Windows command.

    SharpPack: This launcher allows an attacker to execute a binary or script from a compressed file archive. It can be used to evade detection by compressing the payload and hiding it in a legitimate-looking archive file.

    SharpUp: This launcher allows an attacker to download and execute a payload from a remote server. It can be used to bypass network security measures that block outbound connections to suspicious IP addresses.

    SharpWeb: This launcher allows an attacker to execute a payload from a remote web server. It can be used to bypass network security measures that block outbound connections to suspicious IP addresses or URLs.

    SharpWMI: This launcher allows an attacker to execute a payload using Windows Management Instrumentation (WMI). It can be used to perform a variety of system administration tasks, such as executing commands, reading and writing to the registry, and querying system information.

    SharpGPO: This launcher allows an attacker to execute a payload using Group Policy Object (GPO) commands. It can be used to perform a variety of system administration tasks, such as installing software, configuring system settings, and updating group policies.

    SharpClip: This launcher allows an attacker to execute a payload that has been copied to the clipboard. It requires the user to manually paste the payload into a PowerShell session, which can be done using various social engineering techniques.

    SharpPrintNightmare: This launcher exploits the Print Spooler vulnerability (CVE-2021-34527) to execute arbitrary code on the target system. It requires the Print Spooler service to be running with appropriate permissions.

    SharpDump: This launcher allows an attacker to dump the credentials of logged-in users or the domain controller. It requires administrative privileges to execute and can be used to escalate privileges and move laterally within a network.


Meterpreter :

- The Dynamic Linked Library (DLL) injection stages at runtime. There are various advantages of using Meterpreter as a payload. Some of these are as follows:
- It resides in the memory and nothing is written to the disk.
No new process is created as it can easily be injected into any other running processes of the system. However, there's a limitation to it. We can't inject multiple Meterpreter payloads in the same process.
- By default, all communication done by Meterpreter is encrypted. 
- New features can be added by uploading the DLL via a client that is loaded inmemory and initialized.

Using Meterpreter, we can also migrate it to another process using the migrate command.
When this command is run, Meterpreter first gets the PID from the user to which it has to migrate, and then it checks the architecture of the process and SeDebugPrivilege (used to get a handle of the process).
Next, it fetches the payload that will be injected to the process and calls various windows APIs, such as OpenProcess(), VirtualAllocEx(), WriteProcess—Memory() and CreateRemoteThread(). Once migration is complete, Meterpreter shuts down the previous thread that had the initial Meterpreter running.
Although it sounds complicated, Meterpreter can do all of this with the following simp

Cyber kill chain :

Reconnaissance - Weaponization - Delivery - Exploitation - Installation - Command and Control Server - Actions -


privilege escalation:

   - Vertical privilege escalation, sometimes referred to as privilege elevation, is when an attacker compromises a user account that has limited permissions on a system. They then look for ways to increase their privileges using the same account. For example, they might add the compromised account to the local administrator group.

   - Horizontal privilege escalation, the more common method, is when an attacker gains access to another credential on the network with higher privileges than the initial one used to gain their foothold. With higher-level privileges, an attacker can move freely around the network without detection.


 Types of Privileged Accounts :
 
 The King of Accounts “Domain Admin Accounts” :
  the Domain Admin account has FULL access and control of the AD Domain.  This group is, by default,  a member of the Administrators group on all domain controllers, all domain workstations, and all domain member servers at the time they are joined to the domain. 
  By default, the Administrator account is a member of this group.
  Because the group has full control in the domain, always add users with extreme caution, full audit, and approval. 
  
  The challenging and scary “Domain Service Accounts” :
  These accounts bring multiple systems and applications together so they can communicate and gain access to needed resources, usually to run reports, access databases, or call APIs.  
  These accounts are typically used for backup solutions, analytical solutions, software deployment, and updating security patches.
  
  The forgotten “Local Administrator Accounts” :
  
  The default local Administrator account is a user account for the system administrator.
  Every computer has an Administrator account (SID S-1-5-domain-500, display name Administrator). 
  The Administrator account is the first account that is created during the installation for all Windows Server operating systems, and for Windows client operating systems.
  
  For Windows Server operating systems, the Administrator account gives the user full control of the files, directories, services, and other resources that are under the control of the local server. 
  The Administrator account can be used to create local users and assign user rights and access control permissions. 
  The Administrator account can also be used to take control of local resources at any time simply by changing the user rights and permissions.
  
  The help me “Emergency Accounts” :
  
  These accounts are typically disabled by default until a critical incident occurs, then certain users need to have privileged access to restore systems, services, or even respond to cyber incidents.
  These are only used in emergency scenarios—usually known as “break the glass”—when normal services are not available.  
  For example, during a cyber incident, these emergency accounts are used to access systems in order to conduct digital forensics and reduce contaminating log evidence.
  They can also be used to restrict compromised accounts from being continuously abused.
  
  The hidden and forever “Service Accounts” :
  
  Service accounts are typically used in operating systems to execute applications or run programs, either in the context of system accounts (high privileged accounts without any password) or a specific user account, usually created manually or during software installation.
  On Unix and Linux they are often known as init or inetd, and can also launch programs.
  Service accounts usually are not permitted to log on to systems, however, they tend to have passwords that never change, nor do these accounts expire.
  The accounts are commonly abused by cyber-criminals who find ways to break them so they can run their own binaries at elevated privileges, allowing remote access for the attacker.
  
  
  
  The elevated “Application Accounts”

  Application accounts are routinely used to ensure an application has access to the resources it needs to function, such as databases, networking, automated tasks (like deploying software), automated updates, and the ability to make configuration changes.  These accounts typically keep passwords in configuration files or sometimes use local or service accounts to gain necessary access.  Application accounts are also a target for cybercriminals as they can be easily abused using known vulnerabilities that allow the attackers to gain remote access, modify system binaries, or elevate standard accounts to privileged so they can move around the network.  Most organizations fail to properly patch applications, so attackers can abuse these vulnerabilities all too often.

  

the MiniDumpWriteDump() function is  used in to generate a minidump file of the current process, which includes a snapshot of the process memory, thread context, and other relevant information at the time the dump was generated.
the use of the callback function to execute the shellcode at the time of the minidump generation. The MiniDumpWriteDump() function would call the callback function during the minidump generation process, and the callback function could potentially execute the shellcode in the context of the target process. 


  
  
  
 
 https://delinea.com/blog/top-7-types-of-privileged-accounts-to-protect





  Vertical privilege escalation, sometimes referred to as privilege elevation, is when an attacker compromises a user account that has limited permissions on a system. They then look for ways to increase their privileges using the same account. For example, they might add the compromised account to the local administrator group.
    Horizontal privilege escalation, the more common method, is when an attacker gains access to another credential on the network with higher privileges than the initial one used to gain their foothold. With higher-level privileges, an attacker can move freely around the network without detection.
### Insecure service permissions
This occurs when a service that's running under SYSTEM privileges, but the User has permissions to change the executable binpath to one which could create a reverse shell.
### Unquoted service paths
 it’s still common to find many services with unquoted service paths. When combined with weak folder permissions, this allows an attacker to place an executable in a parent folder, where Windows will look for the executable first to execute. For example, you might have a service path as C:\Program Files\Vendor\binary.exe. When the path is unquoted and the User has permissions to place objects in the C:\Program Files\ path, Windows will first try to execute program.exe. If the attacker can place a binary called program.exe in the path, they can then elevate privileges to the account which that service is running.
 
 
### Weak registry permissions
if an attacker can modify the registry configuration of a service, they can then change the path in service configuration to execute a binary they choose. This could create a reverse shell or elevate privileges on the system.
### Insecure service executables
If an attacker can simply replace the original executable with their own, they can then gain privilege escalation of the account which that service is running under.
### Passwords
passwords for privileged users sitting in a text file on a desktop, in a browser, or in a configuration file. 
Searching the registry using the query: reg query HKLM /f password /t REG_SZ /s
Searching the file system within xml, ini and txt files for the string password: findstr /si password *.xml *.ini *.txt
### Overprivileged Users
standard business Users may have Local Administrator rights on their personal workstations. Attackers can leverage these Local Administrator rights to escalate privileges up to Full Domain using tools such as mimikatz and changes in the OS configuration.
### Security Account Manager (SAM)
Windows stores credentials within the Security Account Management (SAM) database in an encrypted form called a hash. This is a one-directional cryptographic algorithm, which means you need to know the original password to recreate the hash. The SAM and SYSTEM files are locked when Windows is running but an attacker might find a backup copy under the Windows repair directory. 
### Pass-the-hash
If an attacker can’t crack the password from the hash, they may still be able to move around the network using only the hash
Here are some examples of environments where PtH may not work or may be more difficult to execute:
Environments that use multi-factor authentication (MFA) - In environments that use MFA, even if an attacker is able to obtain a user's password hash, they will still need to bypass the second factor of authentication, such as a smart card or token. This can make it more difficult to use the PtH technique effectively.
Environments that use Kerberos authentication - In environments that use Kerberos authentication, the password hash is not stored in a local database, but rather in the Kerberos ticket-granting ticket (TGT). This can make it more difficult for an attacker to obtain the password hash and use the PtH technique.
### OS vulnerabilities or kernel exploits
A recent example known as Print Nightmare (CVE 2021 34527) is a vulnerability in the Print Spooler that enabled an attacker to perform remote code execution and privilege escalation.










